# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

What artist released the longest song?
SELECT duration_ms, artist_name 
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc;

What are the 10 most popular artists?
SELECT popularity, artist_name, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc limit 10;

What is the average danceability by artist and track?
SELECT avg(danceability), artist_name, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

What is the average danceability for the 10 most popular songs?
SELECT avg(danceability), artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc limit 10;

How would you group the songs by danceability?
SELECT artist_name, track_name, danceability,
CASE
     WHEN danceability > 0.75 THEN 'This song is a jam'
     WHEN danceability < 0.45 THEN 'I cannot dance to this'
     ELSE 'This song is alright'
 END AS total_danceability
 FROM BIT_DB.Spotifydata
 ORDER BY danceability;
